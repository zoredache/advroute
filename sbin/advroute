#!/bin/bash

DEBUG=0
ERROR=0
declare -i RULECOUNTER=1000
ACTION='none'

# Make sure only root can run us.
if [ ! "${UID}" = 0 ] ; then
    echo >&2
    echo >&2 "Only user root can run Advroute."
    echo >&2
    exit 1
fi

while read -r -a RPSTAT ; do

  [[ -z ${RPSTAT[0]} ]] && continue  # skip empty lines

  if [[ "0" != "${RPSTAT[2]}" ]] ; then
    echo >&2
    echo >&2 "The reverse path filter must be disabled on all interfaces!"
    echo >&2 "The RP filter feature is incompatible with policy routing"
    echo >&2 "See: /sbin/sysctl -a | grep '\.rp_filter' and /etc/sysctl.conf"
    echo >&2
    exit 1
    break
  fi
done < <(sysctl -a 2>/dev/null | grep '\.rp_filter' | grep -v 'lo.rp_filter')


START_ADVROUTE=NO
START_RULES=standard
if [ -e /etc/default/advroute ] ; then
    source /etc/default/advroute
fi

# Set path
export PATH="/bin:/usr/bin:/sbin:/usr/sbin"

# Commands
CMD_RM='/bin/rm'
CMD_IP='/bin/ip'
CMD_TRUE='/bin/true'
CMD_LESS='/usr/bin/less'

# Make sure our generated files cannot be accessed by anyone else.
umask 077

# Trap signals
trap '' EXIT
trap '' SIGHUP

# Config File
ADVROUTE_CONFIG='/etc/network/routes'
ADVROUTE_TMP="/tmp/.advroute-tmp-$$-${RANDOM}-${RANDOM}"

SECTION_TYPE=""
SECTION_NAME=""

rrtable() {
    SECTION_TYPE="rrtable"
    SECTION_NAME=${1}
    echo "# ${SECTION_TYPE} ${SECTION_NAME}" >> ${ADVROUTE_TMP}/route_flush
    echo "# ${SECTION_TYPE} ${SECTION_NAME}" >> ${ADVROUTE_TMP}/route_add
}

route() {
    if [ ${SECTION_TYPE} != "rrtable" ] ; then
        ERROR=1
        return 1
    fi
    case "${ACTION}" in
      startrules ) : ;;
      start | debug )
        echo "${CMD_IP} route flush $* proto static table ${SECTION_NAME} || echo fail" >> ${ADVROUTE_TMP}/route_flush
        echo "${CMD_IP} route add $* proto static table ${SECTION_NAME} || echo fail" >> ${ADVROUTE_TMP}/route_add
        ;;
      stop | * )
        echo "${CMD_IP} route flush $* proto static table ${SECTION_NAME} || echo fail" >> ${ADVROUTE_TMP}/route_flush
        ;;
    esac
}

rules() {
    SECTION_TYPE="rules"
    SECTION_NAME=${1}
    if [ ${SECTION_NAME} == ${START_RULES} ] ; then
        echo "# ${SECTION_TYPE} ${SECTION_NAME}" >> ${ADVROUTE_TMP}/rule_flush
        echo "# ${SECTION_TYPE} ${SECTION_NAME}" >> ${ADVROUTE_TMP}/rule_add
        echo "${CMD_IP} rule flush || echo fail" >> ${ADVROUTE_TMP}/rule_flush
        echo "${CMD_IP} rule add priority 32766 lookup main || echo fail" >> ${ADVROUTE_TMP}/rule_add
        echo "${CMD_IP} rule add priority 32767 lookup default || echo fail" >> ${ADVROUTE_TMP}/rule_add
    fi
}

rule() {
    if [ ${SECTION_TYPE} != "rules" ] ; then
        ERROR=1
        return 1
    fi
    if [ ${SECTION_NAME} == ${START_RULES} ] ; then
        RULECOUNTER=100+${RULECOUNTER}
        echo "${CMD_IP} rule add priority ${RULECOUNTER} $* || echo fail" >> ${ADVROUTE_TMP}/rule_add
    fi
}

doStatus() {
    (
        echo 
        echo "--- ROUTES ---------------------------------------------------------------------"
        echo 
        ${CMD_IP} -stats route show table all

        echo 
        echo 
        echo "--- RULES ----------------------------------------------------------------------"
        echo 
        ${CMD_IP} -stats rule show

        echo 
        echo 
        echo "--- ADDR -----------------------------------------------------------------------"
        echo 
        ${CMD_IP} -stats addr show

        echo 
        echo 
        echo "--- LINK -----------------------------------------------------------------------"
        echo 
        ${CMD_IP} -stats link show

        echo 
    ) | ${CMD_LESS}
    return 0
}

createWorkDir() {
    mkdir ${ADVROUTE_TMP}
    touch ${ADVROUTE_TMP}/route_flush
    touch ${ADVROUTE_TMP}/route_add
    touch ${ADVROUTE_TMP}/rule_flush
    touch ${ADVROUTE_TMP}/rule_add
    touch ${ADVROUTE_TMP}/start
}

cleanWorkDir() {
    rm -rf ${ADVROUTE_TMP}
}

doDebug() {
    DEBUG=1
    createWorkDir
    echo "advroute: Processing file ${ADVROUTE_CONFIG}"
    source ${ADVROUTE_CONFIG}
    cat ${ADVROUTE_TMP}/route_flush ${ADVROUTE_TMP}/route_add \
        ${ADVROUTE_TMP}/rule_flush ${ADVROUTE_TMP}/rule_add >> ${ADVROUTE_TMP}/start
    echo "${CMD_IP} route flush cache || echo fail" >> ${ADVROUTE_TMP}/start
    echo "advroute: Displaying rules and routes"
    ${CMD_LESS}  ${ADVROUTE_TMP}/start
    cleanWorkDir
}

doStart() {
    echo "advroute: Processing file ${ADVROUTE_CONFIG}"
    createWorkDir
    source ${ADVROUTE_CONFIG}
    cat ${ADVROUTE_TMP}/route_flush ${ADVROUTE_TMP}/route_add \
        ${ADVROUTE_TMP}/rule_flush ${ADVROUTE_TMP}/rule_add >> ${ADVROUTE_TMP}/start
    echo "${CMD_IP} route flush cache || echo fail" >> ${ADVROUTE_TMP}/start
    if [ ${ERROR} -eq 0 ] ; then
        echo "advroute: Activating new rules and routes"
        source ${ADVROUTE_TMP}/start >/dev/null 2>/dev/null
        cleanWorkDir
    else
        echo "advroute: Error generating script"
    fi
}

doStop() {
    START_RULES=standard
    echo "advroute: Processing file ${ADVROUTE_CONFIG}"
    createWorkDir
    source ${ADVROUTE_CONFIG}
    cat ${ADVROUTE_TMP}/route_flush ${ADVROUTE_TMP}/route_add \
        ${ADVROUTE_TMP}/rule_flush ${ADVROUTE_TMP}/rule_add >> ${ADVROUTE_TMP}/start
    echo "${CMD_IP} route flush cache || echo fail" >> ${ADVROUTE_TMP}/start
    if [ ${ERROR} -eq 0 ] ; then
        echo "advroute: Flushing advanced routes"
        source ${ADVROUTE_TMP}/start
        cleanWorkDir
    else
        echo "advroute: Error generating script"
    fi
}

arg="${1}"

case "${arg}" in
  debug)
    ACTION='debug'
    doDebug
    ;;
  status)
    ACTION='status'
    doStatus
    ;;
  startrules)
    ACTION='startrules'
    if [ -n "${2}" ] ; then
        START_RULES=${2}
    else
        echo 'Missing required ruleset name'
    fi
    ;;
  start)
    ACTION='start'
    if [ -n "${2}" ] ; then
        START_RULES=${2}
    fi
    doStart
    ;;
  stop)
    ACTION='stop'
    doStop
    ;;
  *)
    echo "advroute: Unknown argument"
    ;;
esac
